{"version":3,"sources":["components/oic/statGroup/Column.js","components/oic/statGroup/Card.js","components/oic/statGroup/Board.js","components/oic/statGroup/StatGroup.js","components/oic/statGroup/StatGroupWrapper.js"],"names":["Container","styled","div","TaskList","Column","props","children","spec","endDrag","monitor","component","didDrop","console","log","beginDrag","id","isDragging","getItem","DraggableCard","_","flowRight","DropTarget","hover","columnId","columnIndex","draggingItem","moveCard","connect","connectDropTarget","dropTarget","DragSource","connectDragSource","dragSource","className","cn","isSpacer","title","Board","columns","map","column","cardIds","cardId","cards","find","card","index","length","Option","Select","StatGroup","selectedStatGroup","statGroup","newtempStats","stats","filter","word","statArr","includes","setState","name","submit","fireStore","collection","doc","dbKey","state","set","destColumnId","ids","slice","handleChange","statGroups","nameVisable","statGroupObjArr","this","onSnapshot","snapshot","a","docs","i","push","data","justify","span","style","width","marginRight","placeholder","onChange","e","marginTop","onClick","target","value","Component","StatGroupWrapper","useState","setStats","setColums","useContext","AuthContext","useEffect","statsObjArr","get","then"],"mappings":"sQAGMA,EAAYC,IAAOC,IAAV,iPAYTC,EAAWF,IAAOC,IAAV,uGAMP,SAASE,EAAOC,GACnB,OAAO,cAACL,EAAD,UACH,cAACG,EAAD,UACKE,EAAMC,a,gCClBbC,EAAO,CACTC,QADS,SACDH,EAAOI,EAASC,GACfD,EAAQE,WAGTC,QAAQC,IAAI,+BACZD,QAAQC,IAAIR,EAAOI,EAASC,IAH5BE,QAAQC,IAAI,iBAMpBC,UATS,SASCT,GACN,MAAO,CAAEU,GAAIV,EAAMU,KAGvBC,WAbS,SAaEX,EAAOI,GACd,OAAOJ,EAAMU,KAAON,EAAQQ,UAAUF,KAIpCf,EAAYC,IAAOC,IAAV,6DAmBZ,I,EAAMgB,EAAgBC,IAAEC,UAAU,CACvCC,qBACE,OACA,CACEC,MADF,SACQjB,EAAOI,GACX,IAAOc,EAAyBlB,EAAzBkB,SAAUC,EAAenB,EAAfmB,YACXC,EAAehB,EAAQQ,UACzBQ,EAAaV,KAAOV,EAAMU,IAC5BV,EAAMqB,SAASD,EAAaV,GAAIQ,EAAUC,MAIhD,SAAAG,GAAO,MAAK,CACVC,kBAAmBD,EAAQE,iBAG/BC,qBACE,OACAvB,GACA,SAACoB,EAASlB,GAAV,MAAuB,CACrBsB,kBAAmBJ,EAAQK,aAC3BhB,WAAYP,EAAQO,kBArBGG,EAftB,SAAcd,GAGnB,OAAOc,IAAEC,UAAUf,EAAM0B,kBAAmB1B,EAAMuB,kBAA3CT,CACL,qBACEc,UAAWC,IAAG,OAAQ,CACpB,iBAAkB7B,EAAMW,WACxB,eAAgBX,EAAM8B,WAH1B,SAME,cAAC,EAAD,UAAY9B,EAAM+B,cCjClBpC,EAAYC,IAAOC,IAAV,gDAIR,SAASmC,EAAMhC,GAEpB,OACE,cAAC,EAAD,CAAW4B,UAAU,QAArB,SACG5B,EAAMiC,QAAQC,KAAI,SAACC,GAAD,OACjB,eAACpC,EAAD,CAEEgC,MAAOI,EAAOJ,MAFhB,UAIGI,EAAOC,QACLF,KAAI,SAACG,GAAD,OAAYrC,EAAMsC,MAAMC,MAAK,SAACC,GAAD,OAAUA,EAAK9B,KAAO2B,QACvDH,KAAI,SAACM,EAAMC,GAAP,OACH,cAAC5B,EAAD,CAEEH,GAAI8B,EAAK9B,GACTQ,SAAUiB,EAAOzB,GACjBS,YAAasB,EACbV,MAAOS,EAAKT,MACZV,SAAUrB,EAAMqB,UALXmB,EAAK9B,OAQW,IAA1ByB,EAAOC,QAAQM,QACd,cAAC7B,EAAD,CACEiB,UAAQ,EACRnB,WAAYX,EAAMW,WAClBU,SAAU,SAACgB,GAAD,OAAYrC,EAAMqB,SAASgB,EAAQF,EAAOzB,GAAI,QAnBvDyB,EAAOzB,S,gDCTdiC,EAAWC,IAAXD,OAEFE,E,kDAEF,WAAY7C,GAAQ,IAAD,8BACf,cAAMA,IAsBV8C,kBAAoB,SAACC,GAEjB,IACIC,EADY,EAAKhD,MAAMiD,MAAMf,KAAI,SAAAM,GAAI,OAAIA,EAAK9B,MACrBwC,QAAO,SAACC,GAAD,OAAWJ,EAAUK,QAAQC,SAASF,MAE1E,EAAKG,SAAS,CAAEC,KAAMR,EAAUQ,OAEhC,EAAKD,SAAS,CACVrB,QAAS,CACL,CACIvB,GAAI,EACJqB,MAAO,MACPK,QAASY,GAEb,CACItC,GAAI,EACJqB,MAAO,MACPK,QAASW,EAAUK,aAxChB,EA+CnBI,OAAS,WACLC,IAAUC,WAAW,SAASC,IAAI,EAAK3D,MAAM4D,OAAOF,WAAW,aAAaC,IAAI,EAAKE,MAAMN,MAAMO,IAAI,CAAEP,KAAM,EAAKM,MAAMN,KAAMH,QAAS,EAAKS,MAAM5B,QAAQ,GAAGG,WAhD9I,EAmDnBf,SAAW,SAACgB,EAAQ0B,EAActB,GAE9B,EAAKa,UAAS,SAAAO,GAAK,MAAK,CACpB5B,QAAS4B,EAAM5B,QAAQC,KAAI,SAAAC,GAAM,kCAC1BA,GAD0B,IAE7BC,QAAStB,IAAEC,WAEP,SAAAiD,GAAG,OACC7B,EAAOzB,KAAOqD,EAAd,sBACUC,EAAIC,MAAM,EAAGxB,IADvB,CAC+BJ,GAD/B,YAC0C2B,EAAIC,MAAMxB,KAC9CuB,KAEV,SAAAA,GAAG,OAAIA,EAAId,QAAO,SAAAxC,GAAE,OAAIA,IAAO2B,OAP1BvB,CAQPqB,EAAOC,mBAhEF,EAsEnB8B,aAAe,WACX3D,QAAQC,IAAI,YArEZ,EAAKqD,MAAQ,CACTvB,MAAO,EAAKtC,MAAMiD,MAClBhB,QAAS,EAAKjC,MAAMiC,QACpBsB,KAAM,KACNY,WAAY,KACZC,aAAa,GAPF,E,qDAWnB,WAAqB,IAAD,OACZC,EAAkB,GAEtBZ,IAAUC,WAAW,SAASC,IAAIW,KAAKtE,MAAM4D,OAAOF,WAAW,aAAaa,WAA5E,uCAAuF,WAAMC,GAAN,SAAAC,EAAA,6DACnFJ,EAAkB,GADiE,SAE7EG,EAASE,KAAKxC,KAAI,SAACyB,EAAKgB,GAC1BN,EAAgBO,KAAK,cAACjC,EAAD,CAAgBkC,KAAMlB,EAAIkB,OAA1B,SAAoClB,EAAIkB,OAAOtB,MAAlCoB,OAH6C,OAKnF,EAAKrB,SAAS,CAAEa,WAAYE,IALuD,2CAAvF,yD,oBA4DJ,WAAU,IAAD,OAEL,OAAQ,eAAC,IAAD,CAAKS,QAAQ,SAAb,UAEJ,eAAC,IAAD,CAAKC,KAAM,EAAX,UACI,cAAC,IAAD,CACIC,MAAO,CAAEC,MAAO,OAAQC,YAAa,OACrCC,YAAY,oBACZC,SAAU,SAACC,EAAGR,GAAJ,OAAa,EAAK/B,kBAAkB+B,EAAKA,OAHvD,SAKKP,KAAKT,MAAMM,aAEhB,qBAAKa,MAAO,CAAEM,UAAW,OAASC,QAAS,kBAAM,EAAKjC,SAAS,CAAEc,aAAa,EAAMb,KAAM,QAA1F,sCAGJ,eAAC,IAAD,CAAKwB,KAAM,GAAX,UACMT,KAAKT,MAAMO,YAAc,cAAC,IAAD,CAAOY,MAAO,CAAEC,MAAO,OAASG,SAAU,SAACC,GAAD,OAAO,EAAK/B,SAAS,CAAEC,KAAM8B,EAAEG,OAAOC,WAAe,KACxHnB,KAAKT,MAAMN,OAASe,KAAKT,MAAMO,YAAaE,KAAKT,MAAMN,KAAO,KAChE,uBAEA,cAACvB,EAAD,CACIM,MAAOgC,KAAKT,MAAMvB,MAClBL,QAASqC,KAAKT,MAAM5B,QACpBZ,SAAUiD,KAAKjD,WAEnB,cAAC,IAAD,CAAQkE,QAASjB,KAAKd,OAAtB,8B,GArGQkC,aA6GT7C,IC/DA8C,UAhDf,WAEI,MAA0BC,mBAAS,MAAnC,mBAAO3C,EAAP,KAAc4C,EAAd,KACA,EAA6BD,mBAAS,MAAtC,mBAAO3D,EAAP,KAAgB6D,EAAhB,KAEQlC,EAAUmC,qBAAWC,KAArBpC,MAgCR,OA9BAqC,oBAAS,sBAAC,4BAAAxB,EAAA,0DAEFb,EAFE,uBAGEsC,EAAc,GAHhB,SAKIzC,IAAUC,WAAW,SAASC,IAAIC,GAAOF,WAAW,SAASyC,MAAMC,MAAK,SAAC5B,GAC3EA,EAASE,KAAKxC,KAAI,SAACyB,EAAKgB,GAAN,OAAYuB,EAAYtB,KAAK,CAC3ClE,GAAIiD,EAAIkB,OAAOA,KAAKnE,GACpBqB,MAAO4B,EAAIkB,OAAOA,KAAKtB,aAE5B6C,MAAK,WACJP,EAASK,GACTJ,EAAU,CACN,CACIpF,GAAI,EACJqB,MAAO,MACPK,QAAS8D,EAAYhE,KAAI,SAAAM,GAAI,OAAIA,EAAK9B,OAE1C,CACIA,GAAI,EACJqB,MAAO,MACPK,QAAS,SArBnB,2CA2BP,CAACwB,IAIA,qBAAKhC,UAAU,mBAAf,SAESqB,GAAShB,EACN,cAAC,EAAD,CAAWgB,MAAOA,EAAOhB,QAASA,EAAS2B,MAAOA,IAChD","file":"static/js/30.40976dcd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  background-color: #dfdfdf;\r\n  box-shadow: 4px 4px 12px 4px #888888;\r\n  max-height: 60em;\r\n  overflow: auto;\r\n  margin: 8px;\r\n  border-radius: 2px;\r\n  width: 500px;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst TaskList = styled.div`\r\n  padding: 8px;\r\n  transition: background-color 2s ease;\r\n  flex-grow: 1;\r\n`;\r\n\r\nexport function Column(props) {\r\n    return <Container >\r\n        <TaskList>\r\n            {props.children}\r\n        </TaskList>\r\n    </Container>;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {DragSource, DropTarget} from 'react-dnd';\r\nimport cn from 'classnames';\r\nimport _ from 'lodash';\r\n\r\nconst spec = {\r\n    endDrag(props, monitor, component) {\r\n        if (!monitor.didDrop()) {\r\n            console.log('wrong target');\r\n        } else {\r\n            console.log('drag ended, correct target ');\r\n            console.log(props, monitor, component);\r\n        }\r\n    },\r\n    beginDrag(props) {\r\n        return { id: props.id };\r\n    },\r\n\r\n    isDragging(props, monitor) {\r\n        return props.id === monitor.getItem().id;\r\n    },\r\n}\r\n\r\n    const Container = styled.div`\r\n        border-radius: 2px;\r\n    `;\r\n\r\nexport function Card(props) {\r\n\r\n  \r\n  return _.flowRight(props.connectDragSource, props.connectDropTarget)(\r\n    <div\r\n      className={cn('Card', {\r\n        'Card--dragging': props.isDragging,\r\n        'Card--spacer': props.isSpacer,\r\n      })}\r\n    >\r\n      <Container>{props.title}</Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const DraggableCard = _.flowRight([\r\n  DropTarget(\r\n    'Card',\r\n    {\r\n      hover(props, monitor) {\r\n        const {columnId, columnIndex} = props;\r\n        const draggingItem = monitor.getItem();\r\n        if (draggingItem.id !== props.id) {\r\n          props.moveCard(draggingItem.id, columnId, columnIndex);\r\n        }\r\n      },\r\n    },\r\n    connect => ({\r\n      connectDropTarget: connect.dropTarget(),\r\n    })\r\n  ),\r\n  DragSource(\r\n    'Card',\r\n    spec,\r\n    (connect, monitor) => ({\r\n      connectDragSource: connect.dragSource(),\r\n      isDragging: monitor.isDragging(),\r\n    })\r\n  ),\r\n])(Card);\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { Column } from \"./Column\";\r\nimport { DraggableCard } from \"./Card\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nexport function Board(props) {\r\n\r\n  return (\r\n    <Container className=\"Board\">\r\n      {props.columns.map((column) => (\r\n        <Column\r\n          key={column.id}\r\n          title={column.title}\r\n        >\r\n          {column.cardIds\r\n            .map((cardId) => props.cards.find((card) => card.id === cardId))\r\n            .map((card, index) => (\r\n              <DraggableCard\r\n                key={card.id}\r\n                id={card.id}\r\n                columnId={column.id}\r\n                columnIndex={index}\r\n                title={card.title}\r\n                moveCard={props.moveCard}\r\n              />\r\n            ))}\r\n          {column.cardIds.length === 0 && (\r\n            <DraggableCard\r\n              isSpacer\r\n              isDragging={props.isDragging}\r\n              moveCard={(cardId) => props.moveCard(cardId, column.id, 0)}\r\n            />\r\n          )}\r\n        </Column>\r\n      ))}\r\n    </Container>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { fireStore } from '../../../firebase';\r\nimport _ from 'lodash';\r\nimport { Board } from './Board';\r\nimport { Row, Col, Button, Input, Select } from 'antd';\r\n\r\nconst { Option } = Select;\r\n\r\nclass StatGroup extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cards: this.props.stats,\r\n            columns: this.props.columns,\r\n            name: null,\r\n            statGroups: null,\r\n            nameVisable: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let statGroupObjArr = []\r\n        // GET ALL STATGROUPS \r\n        fireStore.collection('users').doc(this.props.dbKey).collection('statGroup').onSnapshot(async(snapshot) => {\r\n            statGroupObjArr = []\r\n            await snapshot.docs.map((doc, i) => {\r\n                statGroupObjArr.push(<Option key={i} data={doc.data()} >{doc.data().name}</Option>) \r\n            })\r\n            this.setState({ statGroups: statGroupObjArr })\r\n        })\r\n    }\r\n\r\n    selectedStatGroup = (statGroup) => {\r\n\r\n        let tempStats = this.props.stats.map(card => card.id)\r\n        let newtempStats = tempStats.filter((word) => !statGroup.statArr.includes(word))\r\n\r\n        this.setState({ name: statGroup.name })\r\n\r\n        this.setState({\r\n            columns: [\r\n                {\r\n                    id: 0,\r\n                    title: 'one',\r\n                    cardIds: newtempStats,\r\n                },\r\n                {\r\n                    id: 1,\r\n                    title: 'two',\r\n                    cardIds: statGroup.statArr,\r\n                }\r\n            ]\r\n        })\r\n\r\n    }\r\n\r\n    submit = () => {\r\n        fireStore.collection(\"users\").doc(this.props.dbKey).collection('statGroup').doc(this.state.name).set({ name: this.state.name, statArr: this.state.columns[1].cardIds })\r\n    }\r\n\r\n    moveCard = (cardId, destColumnId, index) => {\r\n\r\n        this.setState(state => ({\r\n            columns: state.columns.map(column => ({\r\n                ...column,\r\n                cardIds: _.flowRight(\r\n                    // 2) If this is the destination column, insert the cardId.\r\n                    ids =>\r\n                        column.id === destColumnId\r\n                            ? [...ids.slice(0, index), cardId, ...ids.slice(index)]\r\n                            : ids,\r\n                    // 1) Remove the cardId for all columns\r\n                    ids => ids.filter(id => id !== cardId)\r\n                )(column.cardIds),\r\n            })),\r\n        }));\r\n\r\n    };\r\n\r\n    handleChange = () => {\r\n        console.log('changed');\r\n    }\r\n    \r\n    render() {\r\n\r\n        return (<Row justify=\"center\">\r\n\r\n            <Col span={4}>\r\n                <Select\r\n                    style={{ width: '100%', marginRight: '6px' }}\r\n                    placeholder=\"Select Stat Group\"\r\n                    onChange={(e, data) => this.selectedStatGroup(data.data)}\r\n                >\r\n                    {this.state.statGroups}\r\n                </Select>\r\n                <div style={{ marginTop: '1em' }} onClick={() => this.setState({ nameVisable: true, name: null })}>Create New Stat Group</div>\r\n            </Col>\r\n\r\n            <Col span={10}>\r\n                { this.state.nameVisable ? <Input style={{ width: '80%' }} onChange={(e) => this.setState({ name: e.target.value })} /> : null }\r\n                { this.state.name && !this.state.nameVisable? this.state.name : null }\r\n                <br />\r\n                \r\n                <Board\r\n                    cards={this.state.cards}\r\n                    columns={this.state.columns}\r\n                    moveCard={this.moveCard}\r\n                />\r\n                <Button onClick={this.submit}>Submit</Button>\r\n            </Col>\r\n\r\n        </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatGroup\r\n","import React, { useState, useEffect, useContext } from 'react';\nimport { fireStore } from '../../../firebase';\nimport _ from 'lodash';\nimport { AuthContext } from '../../../context/Context';\nimport StatGroup from './StatGroup';\n\nfunction StatGroupWrapper() {\n\n    const [stats, setStats] = useState(null)\n    const [columns, setColums] = useState(null)\n\n    const { dbKey } = useContext(AuthContext);\n\n    useEffect(async () => {\n\n        if (dbKey) {\n            let statsObjArr = []\n// GET ALL STATS AND ARRANGE THEM FOR DRAG AND DROP\n            await fireStore.collection('users').doc(dbKey).collection('stats').get().then((snapshot) => {\n                snapshot.docs.map((doc, i) => statsObjArr.push({\n                    id: doc.data().data.id,\n                    title: doc.data().data.name\n                }))\n            }).then(() => {\n                setStats(statsObjArr);\n                setColums([\n                    {\n                        id: 0,\n                        title: 'one',\n                        cardIds: statsObjArr.map(card => card.id),\n                    },\n                    {\n                        id: 1,\n                        title: 'two',\n                        cardIds: [],\n                    }\n                ])\n            })\n        }\n\n    }, [dbKey])\n\n\n    return (\n        <div className=\"statGroupWrapper\">\n           \n                {stats && columns ?\n                    <StatGroup stats={stats} columns={columns} dbKey={dbKey} />\n                    : 'loading....'}\n\n        </div>\n    );\n}\n\nexport default StatGroupWrapper; "],"sourceRoot":""}